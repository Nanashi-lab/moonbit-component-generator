use crate::MoonBitComponent;
use camino::Utf8Path;
use std::fmt::Write;
use wit_bindgen_core::uwriteln;

pub fn generate_get_script_component(script: &str, target: &Utf8Path) -> anyhow::Result<()> {
    let mut component = MoonBitComponent::empty_from_wit(
        r#"
            package golem:script-source;

            world script-source {
                export get-script: func() -> string;
            }
            "#,
        Some("script-source"),
    )?;

    component.define_bindgen_packages()?;

    let mut stub_mbt = String::new();
    uwriteln!(stub_mbt, "// Generated by `moonbit-component-generator`");
    uwriteln!(stub_mbt, "");
    uwriteln!(stub_mbt, "pub fn get_script() -> String {{");
    for line in script.lines() {
        uwriteln!(stub_mbt, "    #|{line}");
    }
    uwriteln!(stub_mbt, "}}");

    component.write_world_stub(&stub_mbt)?;

    component.build(None, target)?;

    Ok(())
}

#[cfg(test)]
use crate::Trace;
#[cfg(test)]
test_r::inherit_test_dep!(Trace);

#[cfg(test)]
mod tests {
    use crate::Trace;
    use camino::Utf8Path;
    use indoc::indoc;
    use test_r::{inherit_test_dep, test};

    inherit_test_dep!(Trace);

    #[test]
    fn generate_get_script_component(_trace: &Trace) -> anyhow::Result<()> {
        let script = indoc! {
            r#"export function hello() {
                 return "Hello, World!";
            }"#
        };
        let target = Utf8Path::new("target/test-output/generate_get_script_component.wasm");

        super::generate_get_script_component(script, target)?;

        // Testing with external wasmtime-cli
        let output = std::process::Command::new("wasmtime")
            .arg("--invoke")
            .arg("get-script()")
            .arg(Utf8Path::new(
                "target/test-output/generate_get_script_component.wasm",
            ))
            .output()?;

        assert_eq!(
            output.stdout.trim_ascii_end(),
            r#""export function hello() {\n     return \"Hello, World!\";\n}""#.as_bytes()
        );

        Ok(())
    }
}
